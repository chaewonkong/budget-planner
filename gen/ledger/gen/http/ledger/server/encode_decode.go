// Code generated by goa v3.12.4, DO NOT EDIT.
//
// ledger HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/chaewonkong/budget-planner/design/ledger --output
// gen/ledger

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeRecordExpenseResponse returns an encoder for responses returned by the
// ledger RecordExpense endpoint.
func EncodeRecordExpenseResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeRecordExpenseRequest returns a decoder for requests sent to the ledger
// RecordExpense endpoint.
func DecodeRecordExpenseRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body struct {
				// amount spent
				Amount *float64 `form:"amount" json:"amount" xml:"amount"`
				// category
				Category *string `form:"category" json:"category" xml:"category"`
				// memo
				Memo *string `form:"memo" json:"memo" xml:"memo"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			userID int64

			params = mux.Vars(r)
		)
		{
			userIDRaw := params["userID"]
			v, err2 := strconv.ParseInt(userIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("userID", userIDRaw, "integer"))
			}
			userID = v
		}
		if err != nil {
			return nil, err
		}
		payload := NewRecordExpensePayload(body, userID)

		return payload, nil
	}
}
