// Code generated by goa v3.12.4, DO NOT EDIT.
//
// ledger HTTP client CLI support package
//
// Command:
// $ goa gen github.com/chaewonkong/budget-planner/design/ledger --output
// gen/ledger

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	ledger "github.com/chaewonkong/budget-planner/gen/ledger/gen/ledger"
)

// BuildRecordExpensePayload builds the payload for the ledger RecordExpense
// endpoint from CLI flags.
func BuildRecordExpensePayload(ledgerRecordExpenseBody string, ledgerRecordExpenseUserID string) (*ledger.RecordExpensePayload, error) {
	var err error
	var body struct {
		// amount spent
		Amount *float64 `form:"amount" json:"amount" xml:"amount"`
		// category
		Category *string `form:"category" json:"category" xml:"category"`
		// memo
		Memo *string `form:"memo" json:"memo" xml:"memo"`
	}
	{
		err = json.Unmarshal([]byte(ledgerRecordExpenseBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"amount\": 0.3390706304943471,\n      \"category\": \"Rerum dicta at itaque qui et.\",\n      \"memo\": \"Culpa laboriosam quia.\"\n   }'")
		}
	}
	var userID int64
	{
		userID, err = strconv.ParseInt(ledgerRecordExpenseUserID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT64")
		}
	}
	v := &ledger.RecordExpensePayload{
		Memo: body.Memo,
	}
	if body.Amount != nil {
		v.Amount = *body.Amount
	}
	if body.Category != nil {
		v.Category = *body.Category
	}
	v.UserID = &userID

	return v, nil
}
