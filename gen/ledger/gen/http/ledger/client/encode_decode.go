// Code generated by goa v3.12.4, DO NOT EDIT.
//
// ledger HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/chaewonkong/budget-planner/design/ledger --output
// gen/ledger

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	ledger "github.com/chaewonkong/budget-planner/gen/ledger/gen/ledger"
	goahttp "goa.design/goa/v3/http"
)

// BuildRecordExpenseRequest instantiates a HTTP request object with method and
// path set to call the "ledger" service "RecordExpense" endpoint
func (c *Client) BuildRecordExpenseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		userID int64
	)
	{
		p, ok := v.(*ledger.RecordExpensePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ledger", "RecordExpense", "*ledger.RecordExpensePayload", v)
		}
		if p.UserID != nil {
			userID = *p.UserID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RecordExpenseLedgerPath(userID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ledger", "RecordExpense", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRecordExpenseRequest returns an encoder for requests sent to the
// ledger RecordExpense server.
func EncodeRecordExpenseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*ledger.RecordExpensePayload)
		if !ok {
			return goahttp.ErrInvalidType("ledger", "RecordExpense", "*ledger.RecordExpensePayload", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("ledger", "RecordExpense", err)
		}
		return nil
	}
}

// DecodeRecordExpenseResponse returns a decoder for responses returned by the
// ledger RecordExpense endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeRecordExpenseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ledger", "RecordExpense", resp.StatusCode, string(body))
		}
	}
}
