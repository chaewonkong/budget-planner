// Code generated by goa v3.12.4, DO NOT EDIT.
//
// ledger HTTP client CLI support package
//
// Command:
// $ goa gen github.com/chaewonkong/budget-planner/design/ledger --output
// gen/ledger

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	ledgerc "github.com/chaewonkong/budget-planner/gen/ledger/gen/http/ledger/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `ledger record-expense
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` ledger record-expense --body '{
      "amount": 0.3390706304943471,
      "category": "Rerum dicta at itaque qui et.",
      "memo": "Culpa laboriosam quia."
   }' --user-id 9110927965857420297` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		ledgerFlags = flag.NewFlagSet("ledger", flag.ContinueOnError)

		ledgerRecordExpenseFlags      = flag.NewFlagSet("record-expense", flag.ExitOnError)
		ledgerRecordExpenseBodyFlag   = ledgerRecordExpenseFlags.String("body", "REQUIRED", "")
		ledgerRecordExpenseUserIDFlag = ledgerRecordExpenseFlags.String("user-id", "REQUIRED", "user id")
	)
	ledgerFlags.Usage = ledgerUsage
	ledgerRecordExpenseFlags.Usage = ledgerRecordExpenseUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "ledger":
			svcf = ledgerFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "ledger":
			switch epn {
			case "record-expense":
				epf = ledgerRecordExpenseFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "ledger":
			c := ledgerc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "record-expense":
				endpoint = c.RecordExpense()
				data, err = ledgerc.BuildRecordExpensePayload(*ledgerRecordExpenseBodyFlag, *ledgerRecordExpenseUserIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// ledgerUsage displays the usage of the ledger command and its subcommands.
func ledgerUsage() {
	fmt.Fprintf(os.Stderr, `Record cash inflow and outflow
Usage:
    %[1]s [globalflags] ledger COMMAND [flags]

COMMAND:
    record-expense: RecordExpense implements RecordExpense.

Additional help:
    %[1]s ledger COMMAND --help
`, os.Args[0])
}
func ledgerRecordExpenseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ledger record-expense -body JSON -user-id INT64

RecordExpense implements RecordExpense.
    -body JSON: 
    -user-id INT64: user id

Example:
    %[1]s ledger record-expense --body '{
      "amount": 0.3390706304943471,
      "category": "Rerum dicta at itaque qui et.",
      "memo": "Culpa laboriosam quia."
   }' --user-id 9110927965857420297
`, os.Args[0])
}
